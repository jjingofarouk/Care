// history-taking.prisma

model ChiefComplaint {
  id              String        @id @default(uuid())
  medicalRecordId String        @unique
  medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade)
  description     String
  duration        String
  onset           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model PresentIllness {
  id              String        @id @default(uuid())
  medicalRecordId String        @unique
  medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade)
  narrative       String
  severity        String?
  progress        String?
  associatedSymptoms String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model PastMedicalCondition {
  id              String        @id @default(uuid())
  medicalRecordId String
  medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade)
  condition       String
  diagnosisDate   DateTime?
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model SurgicalHistory {
  id              String        @id @default(uuid())
  medicalRecordId String
  medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade)
  procedure       String
  datePerformed   DateTime?
  outcome         String?
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model FamilyHistory {
  id              String        @id @default(uuid())
  medicalRecordId String
  medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade)
  relative        String
  condition       String
  ageAtDiagnosis  Int?
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model MedicationHistory {
  id              String        @id @default(uuid())
  medicalRecordId String
  medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade)
  medicationName  String
  dosage          String
  frequency       String
  startDate       DateTime?
  endDate         DateTime?
  isCurrent       Boolean
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model SocialHistory {
  id              String        @id @default(uuid())
  medicalRecordId String        @unique
  medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade)
  smokingStatus   String?
  alcoholUse      String?
  occupation      String?
  maritalStatus   String?
  livingSituation String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model ReviewOfSystems {
  id              String        @id @default(uuid())
  medicalRecordId String
  medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade)
  system          String        // e.g., "Cardiovascular", "Respiratory"
  findings        String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Immunization {
  id              String        @id @default(uuid())
  medicalRecordId String
  medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade)
  vaccine         String
  dateGiven       DateTime
  administeredBy  String?
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model TravelHistory {
  id              String        @id @default(uuid())
  medicalRecordId String
  medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade)
  countryVisited  String
  dateFrom        DateTime?
  dateTo          DateTime?
  purpose         String?
  travelNotes     String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}