// =========================================
// AUTO-GENERATED PRISMA SCHEMA
// DO NOT EDIT THIS FILE DIRECTLY!
// Edit individual module files in /modules instead
// Generated at: 2025-09-20T19:31:50.771Z
// =========================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


// =========================================
// DASHBOARD
// =========================================

// Represents key statistics for the hospital dashboard
model DashboardStats {
  id            String    @id @default(uuid())
  name          String
  value         Float
  period        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  widgets       Widget[]  @relation("DashboardWidgetStats")
}

// Represents key performance indicators for hospital operations
model KPI {
  id            String    @id @default(uuid())
  name          String
  target        Float
  currentValue  Float
  period        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Represents notifications displayed on the dashboard
model Notification {
  id            String    @id @default(uuid())
  message       String
  type          String
  priority      String
  isRead        Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Represents customizable widgets on the dashboard
model Widget {
  id              String         @id @default(uuid())
  title           String
  type            String
  statsId         String?
  stats           DashboardStats? @relation("DashboardWidgetStats", fields: [statsId], references: [id], onDelete: SetNull)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

// =========================================
// HOME
// =========================================

// Represents configuration for the hospital homepage
model HomepageConfig {
  id            String    @id @default(uuid())
  title         String
  subtitle      String?
  theme         String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  heroSections  HeroSection[] @relation("HomepageHeroSections")
}

// Represents the hero section on the homepage
model HeroSection {
  id              String         @id @default(uuid())
  homepageConfigId String
  homepageConfig  HomepageConfig @relation("HomepageHeroSections", fields: [homepageConfigId], references: [id], onDelete: Cascade)
  imageUrl        String?
  headline        String
  subheadline     String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

// Represents news articles displayed on the homepage
model News {
  id            String    @id @default(uuid())
  title         String
  content       String
  publishedAt   DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Represents highlighted content on the homepage
model Highlight {
  id            String    @id @default(uuid())
  title         String
  description   String?
  imageUrl      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// =========================================
// REGISTER
// =========================================

enum UserRole {
  PATIENT
  DOCTOR
  NURSE
  LAB_TECHNICIAN
  PHARMACIST
  RECEPTIONIST
  RADIOLOGIST
  SURGEON
  ADMIN
  STAFF
  ACCOUNTANT
  BILLING_OFFICER
  HOSPITAL_MANAGER
  IT_SUPPORT
  CLEANING_STAFF
  SECURITY
}

model UserRegistration {
  id String @id @default(uuid())
  email String @unique
  firstName String
  lastName String
  role UserRole @default(PATIENT)
  passwordHash String
  patient Patient?
  surgicalTeamMemberships SurgicalTeamMember[]
  surgeryAuditLogs SurgeryAuditLog[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// =========================================
// DOCTOR
// =========================================

// doctor.prisma
// Represents a doctor in the hospital
model Doctor {
  id               String              @id
  firstName        String
  lastName         String
  email            String              @unique
  phone            String?
  departmentId     String
  department       Department          @relation("DoctorDepartment", fields: [departmentId], references: [id], onDelete: Restrict)
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  schedules        DoctorSchedule[]    @relation("DoctorSchedules")
  leaves           DoctorLeave[]       @relation("DoctorLeaves")
  appointments     Appointment[]       @relation("DoctorAppointments")
  specializations  DoctorSpecialization[] @relation("DoctorSpecializations")
  clinicalNotes    ClinicalNote[]      @relation("DoctorClinicalNotes")
  progressNotes    ProgressNote[]      @relation("DoctorProgressNotes")
  soapNotes        SOAPNote[]          @relation("DoctorSOAPNotes")
  prescriptions    Prescription[]      @relation("DoctorPrescriptions")
}

// Represents a doctor's specialization
model Specialization {
  id               String              @id @default(uuid())
  name             String              @unique
  description      String?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  doctors          DoctorSpecialization[] @relation("SpecializationDoctors")
}

// Join table for many-to-many relation between Doctor and Specialization
model DoctorSpecialization {
  id              String         @id @default(uuid())
  doctorId        String
  specializationId String
  doctor          Doctor         @relation("DoctorSpecializations", fields: [doctorId], references: [id], onDelete: Cascade)
  specialization  Specialization @relation("SpecializationDoctors", fields: [specializationId], references: [id], onDelete: Cascade)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

// Represents a doctor's schedule
model DoctorSchedule {
  id            String     @id @default(uuid())
  doctorId      String
  doctor        Doctor     @relation("DoctorSchedules", fields: [doctorId], references: [id], onDelete: Cascade)
  startTime     DateTime
  endTime       DateTime
  dayOfWeek     String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// Represents a doctor's leave of absence
model DoctorLeave {
  id            String     @id @default(uuid())
  doctorId      String
  doctor        Doctor     @relation("DoctorLeaves", fields: [doctorId], references: [id], onDelete: Cascade)
  startDate     DateTime
  endDate       DateTime
  reason        String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// =========================================
// NURSING
// =========================================

// Represents a nurse in the hospital
model Nurse {
  id            String         @id @default(uuid())
  firstName     String
  lastName      String
  email         String         @unique
  phone         String?
  departmentId  String
  department    Department     @relation("NurseDepartment", fields: [departmentId], references: [id], onDelete: Restrict)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  schedules     NurseSchedule[] @relation("NurseSchedules")
  shifts        Shift[]        @relation("NurseShifts")
}

// Represents a nurse's schedule
model NurseSchedule {
  id            String     @id @default(uuid())
  nurseId       String
  nurse         Nurse      @relation("NurseSchedules", fields: [nurseId], references: [id], onDelete: Cascade)
  startTime     DateTime
  endTime       DateTime
  dayOfWeek     String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// Represents a shift assigned to a nurse
model Shift {
  id            String     @id @default(uuid())
  nurseId       String
  nurse         Nurse      @relation("NurseShifts", fields: [nurseId], references: [id], onDelete: Cascade)
  wardId        String
  ward          Ward       @relation("ShiftWard", fields: [wardId], references: [id], onDelete: Restrict)
  startTime     DateTime
  endTime       DateTime
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// =========================================
// SYSTEM ADMIN
// =========================================

// Represents a system administrator
model SystemAdmin {
  id            String       @id @default(uuid())
  firstName     String
  lastName      String
  email         String       @unique
  roleId        String
  role          Role         @relation("AdminRole", fields: [roleId], references: [id], onDelete: Restrict)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  logs          AdminLog[]   @relation("AdminLogs")
}

// Represents permissions assigned to roles
model Permission {
  id            String     @id @default(uuid())
  name          String     @unique
  description   String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  roles         Role[]     @relation("RolePermissions")
}

// Represents roles assigned to system admins
model Role {
  id            String       @id @default(uuid())
  name          String       @unique
  description   String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  admins        SystemAdmin[] @relation("AdminRole")
  permissions   Permission[] @relation("RolePermissions")
}

// Tracks administrative actions
model AdminLog {
  id            String      @id @default(uuid())
  adminId       String
  admin         SystemAdmin @relation("AdminLogs", fields: [adminId], references: [id], onDelete: Cascade)
  action        String
  details       String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

// =========================================
// SOCIAL SERVICE
// =========================================

// Represents a social worker in the hospital
model SocialWorker {
  id                String              @id @default(uuid())
  firstName         String
  lastName          String
  email             String              @unique
  phone             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  supportCases      PatientSupportCase[] @relation("SocialWorkerCases")
}

// Represents support cases handled by social workers
model PatientSupportCase {
  id              String        @id @default(uuid())
  patientId       String
  patient         Patient       @relation("PatientSupportCases", fields: [patientId], references: [id], onDelete: Cascade)
  socialWorkerId  String
  socialWorker    SocialWorker  @relation("SocialWorkerCases", fields: [socialWorkerId], references: [id], onDelete: Restrict)
  caseDetails     String
  status          String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

// =========================================
// INCENTIVE
// =========================================

// Represents an incentive program for hospital staff
model IncentiveProgram {
  id                String            @id @default(uuid())
  name              String            @unique
  description       String?
  startDate         DateTime
  endDate           DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  incentiveRecords  IncentiveRecord[] @relation("ProgramIncentives")
}

// Tracks individual incentive records for staff
model IncentiveRecord {
  id                String           @id @default(uuid())
  programId         String
  program           IncentiveProgram @relation("ProgramIncentives", fields: [programId], references: [id], onDelete: Cascade)
  staffId           String
  staffType         String
  amount            Float
  awardedAt         DateTime
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

// =========================================
// PATIENTS
// =========================================

// patients.prisma
// Represents a patient in the hospital system
model Patient {
  id              String           @id @default(uuid())
  firstName       String
  lastName        String
  dateOfBirth     DateTime
  gender          String
  phone           String?
  email           String?          @unique
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  userId          String?          @unique
  userAccount     UserRegistration? @relation(fields: [userId], references: [id], onDelete: Cascade)
  medicalRecords      MedicalRecord[]      @relation("PatientMedicalRecords")
  appointments        Appointment[]        @relation("PatientAppointments")
  admissions          Admission[]          @relation("PatientAdmissions")
  addresses           PatientAddress[]     @relation("PatientAddresses")
  nextOfKin           NextOfKin?           @relation("PatientNextOfKin")
  insuranceInfo       InsuranceInfo?       @relation("PatientInsurance")
  supportCases        PatientSupportCase[] @relation("PatientSupportCases")
  queueEntries        QueueEntry[]         @relation("PatientQueueEntries")
  clinicalNotes       ClinicalNote[]       @relation("PatientClinicalNotes")
  progressNotes       ProgressNote[]       @relation("PatientProgressNotes")
  soapNotes           SOAPNote[]           @relation("PatientSOAPNotes")
  clinicalTasks       ClinicalTask[]       @relation("PatientClinicalTasks")
  emergencyCases      EmergencyCase[]      @relation("PatientEmergencyCases")
  triage              Triage[]             @relation("PatientTriage")
  maternityCases      MaternityCase[]      @relation("PatientMaternityCases")
  vaccinationRecords  VaccinationRecord[]  @relation("PatientVaccinationRecords")
  surgeries           Surgery[]            @relation("PatientSurgeries")
  preOpAssessments    PreOpAssessment[]    @relation("PatientPreOpAssessments")
  labRequests         LabRequest[]         @relation("PatientLabRequests")
  samples             Sample[]             @relation("PatientSamples")
  imagingOrders       ImagingOrder[]       @relation("PatientImagingOrders")
  prescriptions       Prescription[]       @relation("PatientPrescriptions")
  dispenseRecords     DispenseRecord[]     @relation("PatientDispenseRecords")
  invoices            Invoice[]            @relation("PatientInvoices")
  claims              Claim[]              @relation("PatientClaims")
  nhifClaims          NHIFClaim[]          @relation("PatientNHIFClaims")
  referrals           Referral[]           @relation("PatientReferrals")
}

// Represents a patient's address
model PatientAddress {
  id        String   @id @default(uuid())
  patientId String
  patient   Patient  @relation("PatientAddresses", fields: [patientId], references: [id], onDelete: Cascade)
  street    String
  city      String
  country   String
  postalCode String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Represents a patient's next of kin
model NextOfKin {
  id        String   @id @default(uuid())
  patientId String   @unique
  patient   Patient  @relation("PatientNextOfKin", fields: [patientId], references: [id], onDelete: Cascade)
  firstName String
  lastName  String
  relationship String
  phone     String?
  email     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Represents a patient's insurance information
model InsuranceInfo {
  id            String   @id @default(uuid())
  patientId     String   @unique
  patient       Patient  @relation("PatientInsurance", fields: [patientId], references: [id], onDelete: Cascade)
  provider      String
  policyNumber  String   @unique
  expiryDate    DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// =========================================
// MEDICAL RECORDS
// =========================================

// medical-records.prisma

model MedicalRecord {
  id                 String              @id @default(uuid())
  patientId          String
  patient            Patient             @relation("PatientMedicalRecords", fields: [patientId], references: [id], onDelete: Cascade)

  admissionId        String?             // NEW: Optional link to admission
  admission          Admission?          @relation("AdmissionMedicalRecords", fields: [admissionId], references: [id], onDelete: SetNull)

  recordDate         DateTime
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  // Clinical data
  allergies          Allergy[]           @relation("MedicalRecordAllergies")
  diagnoses          Diagnosis[]         @relation("MedicalRecordDiagnoses")
  vitalSigns         VitalSign[]         @relation("MedicalRecordVitalSigns")

  // History taking
  chiefComplaint     ChiefComplaint?
  presentIllness     PresentIllness?
  pastConditions     PastMedicalCondition[]
  surgicalHistory    SurgicalHistory[]
  familyHistory      FamilyHistory[]
  medicationHistory  MedicationHistory[]
  socialHistory      SocialHistory?
  reviewOfSystems    ReviewOfSystems[]
  immunizations      Immunization[]
  travelHistory      TravelHistory[]
}

model Allergy {
  id              String        @id @default(uuid())
  medicalRecordId String
  medicalRecord   MedicalRecord @relation("MedicalRecordAllergies", fields: [medicalRecordId], references: [id], onDelete: Cascade)
  name            String
  severity        String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Diagnosis {
  id              String        @id @default(uuid())
  medicalRecordId String
  medicalRecord   MedicalRecord @relation("MedicalRecordDiagnoses", fields: [medicalRecordId], references: [id], onDelete: Cascade)
  code            String
  description     String
  diagnosedAt     DateTime
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model VitalSign {
  id              String        @id @default(uuid())
  medicalRecordId String
  medicalRecord   MedicalRecord @relation("MedicalRecordVitalSigns", fields: [medicalRecordId], references: [id], onDelete: Cascade)
  bloodPressure   String?
  heartRate       Int?
  temperature     Float?
  respiratoryRate Int?
  oxygenSaturation Float?
  recordedAt      DateTime
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

// =========================================
// HISTORY TAKING
// =========================================

// history-taking.prisma

model ChiefComplaint {
  id              String        @id @default(uuid())
  medicalRecordId String        @unique
  medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade)
  description     String
  duration        String
  onset           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model PresentIllness {
  id              String        @id @default(uuid())
  medicalRecordId String        @unique
  medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade)
  narrative       String
  severity        String?
  progress        String?
  associatedSymptoms String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model PastMedicalCondition {
  id              String        @id @default(uuid())
  medicalRecordId String
  medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade)
  condition       String
  diagnosisDate   DateTime?
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model SurgicalHistory {
  id              String        @id @default(uuid())
  medicalRecordId String
  medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade)
  procedure       String
  datePerformed   DateTime?
  outcome         String?
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model FamilyHistory {
  id              String        @id @default(uuid())
  medicalRecordId String
  medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade)
  relative        String
  condition       String
  ageAtDiagnosis  Int?
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model MedicationHistory {
  id              String        @id @default(uuid())
  medicalRecordId String
  medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade)
  medicationName  String
  dosage          String
  frequency       String
  startDate       DateTime?
  endDate         DateTime?
  isCurrent       Boolean
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model SocialHistory {
  id              String        @id @default(uuid())
  medicalRecordId String        @unique
  medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade)
  smokingStatus   String?
  alcoholUse      String?
  occupation      String?
  maritalStatus   String?
  livingSituation String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model ReviewOfSystems {
  id              String        @id @default(uuid())
  medicalRecordId String
  medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade)
  system          String        // e.g., "Cardiovascular", "Respiratory"
  findings        String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Immunization {
  id              String        @id @default(uuid())
  medicalRecordId String
  medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade)
  vaccine         String
  dateGiven       DateTime
  administeredBy  String?
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model TravelHistory {
  id              String        @id @default(uuid())
  medicalRecordId String
  medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade)
  countryVisited  String
  dateFrom        DateTime?
  dateTo          DateTime?
  purpose         String?
  travelNotes     String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

// =========================================
// ADT
// =========================================

// adt.prisma
// Represents a patient admission
model Admission {
  id              String          @id @default(uuid())
  patientId       String
  patient         Patient         @relation("PatientAdmissions", fields: [patientId], references: [id], onDelete: Cascade)
  wardId          String
  ward            Ward            @relation("WardAdmissions", fields: [wardId], references: [id], onDelete: Restrict)
  bedId           String?
  bed             Bed?            @relation("AdmissionBed", fields: [bedId], references: [id], onDelete: SetNull)
  admissionDate   DateTime
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  discharges      Discharge[]     @relation("AdmissionDischarges")
  transfers       Transfer[]      @relation("AdmissionTransfers")
  emergencyCases  EmergencyCase[] @relation("EmergencyCaseAdmission")

  // NEW RELATION: All medical records created during this admission
  medicalRecords  MedicalRecord[] @relation("AdmissionMedicalRecords")
}

// Represents a patient discharge
model Discharge {
  id            String     @id @default(uuid())
  admissionId   String
  admission     Admission  @relation("AdmissionDischarges", fields: [admissionId], references: [id], onDelete: Cascade)
  dischargeDate DateTime
  notes         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// Represents a patient transfer between wards or beds
model Transfer {
  id            String     @id @default(uuid())
  admissionId   String
  admission     Admission  @relation("AdmissionTransfers", fields: [admissionId], references: [id], onDelete: Cascade)
  fromWardId    String
  fromWard      Ward       @relation("TransferFromWard", fields: [fromWardId], references: [id], onDelete: Restrict)
  toWardId      String
  toWard        Ward       @relation("TransferToWard", fields: [toWardId], references: [id], onDelete: Restrict)
  transferDate  DateTime
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}
// Represents a hospital bed
model Bed {
  id            String       @id @default(uuid())
  wardId        String
  ward          Ward         @relation("WardBeds", fields: [wardId], references: [id], onDelete: Cascade)
  bedNumber     String       @unique
  isOccupied    Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  admissions    Admission[]  @relation("AdmissionBed")
}

// departments.prisma
// Represents a hospital ward
model Ward {
  id            String       @id @default(uuid())
  name          String       @unique
  departmentId  String
  department    Department   @relation("WardDepartment", fields: [departmentId], references: [id], onDelete: Restrict)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  beds          Bed[]        @relation("WardBeds")
  admissions    Admission[]  @relation("WardAdmissions")
  shifts        Shift[]      @relation("ShiftWard")
  transfersFrom Transfer[]   @relation("TransferFromWard")
  transfersTo   Transfer[]   @relation("TransferToWard")
  rooms         Room[]       @relation("WardRooms")
}

// Represents a room within a ward
model Room {
  id            String     @id @default(uuid())
  wardId        String
  ward          Ward       @relation("WardRooms", fields: [wardId], references: [id], onDelete: Cascade)
  roomNumber    String     @unique
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// =========================================
// QUEUE MGMT
// =========================================

// Represents an entry in the hospital queue
model QueueEntry {
  id              String        @id @default(uuid())
  patientId       String
  patient         Patient       @relation("PatientQueueEntries", fields: [patientId], references: [id], onDelete: Cascade)
  serviceCounterId String
  serviceCounter  ServiceCounter @relation("ServiceCounterQueueEntries", fields: [serviceCounterId], references: [id], onDelete: Restrict)
  queueStatusId   String
  queueStatus     QueueStatus   @relation("QueueEntryStatus", fields: [queueStatusId], references: [id], onDelete: Restrict)
  queueNumber     Int           @unique
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

// Represents a service counter for queue management
model ServiceCounter {
  id            String       @id @default(uuid())
  name          String       @unique
  departmentId  String
  department    Department   @relation("ServiceCounterDepartment", fields: [departmentId], references: [id], onDelete: Restrict)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  queueEntries  QueueEntry[] @relation("ServiceCounterQueueEntries")
}

// Represents the status of a queue entry
model QueueStatus {
  id            String       @id @default(uuid())
  name          String       @unique
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  queueEntries  QueueEntry[] @relation("QueueEntryStatus")
}

// =========================================
// CLINICAL
// =========================================

// Represents a clinical note for a patient
model ClinicalNote {
  id            String     @id @default(uuid())
  patientId     String
  patient       Patient    @relation("PatientClinicalNotes", fields: [patientId], references: [id], onDelete: Cascade)
  doctorId      String
  doctor        Doctor     @relation("DoctorClinicalNotes", fields: [doctorId], references: [id], onDelete: Restrict)
  note          String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// Represents a progress note for a patient
model ProgressNote {
  id            String     @id @default(uuid())
  patientId     String
  patient       Patient    @relation("PatientProgressNotes", fields: [patientId], references: [id], onDelete: Cascade)
  doctorId      String
  doctor        Doctor     @relation("DoctorProgressNotes", fields: [doctorId], references: [id], onDelete: Restrict)
  note          String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// Represents a SOAP note for a patient
model SOAPNote {
  id            String     @id @default(uuid())
  patientId     String
  patient       Patient    @relation("PatientSOAPNotes", fields: [patientId], references: [id], onDelete: Cascade)
  doctorId      String
  doctor        Doctor     @relation("DoctorSOAPNotes", fields: [doctorId], references: [id], onDelete: Restrict)
  subjective    String?
  objective     String?
  assessment    String?
  plan          String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// Represents a clinical task assigned to staff
model ClinicalTask {
  id            String     @id @default(uuid())
  patientId     String
  patient       Patient    @relation("PatientClinicalTasks", fields: [patientId], references: [id], onDelete: Cascade)
  assignedToId  String
  assignedToType String
  description   String
  status        String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// =========================================
// APPOINTMENTS
// =========================================

enum AppointmentStatusEnum {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

// Represents an appointment in the hospital
model Appointment {
  id              String              @id @default(uuid())
  patientId       String
  patient         Patient             @relation("PatientAppointments", fields: [patientId], references: [id], onDelete: Cascade)
  doctorId        String
  doctor          Doctor              @relation("DoctorAppointments", fields: [doctorId], references: [id], onDelete: Restrict)
  visitTypeId     String
  visitType       VisitType           @relation("AppointmentVisitType", fields: [visitTypeId], references: [id], onDelete: Restrict)
  appointmentStatus AppointmentStatusEnum @default(PENDING)
  appointmentDate DateTime
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  appointmentStatusRecords AppointmentStatus[] @relation("AppointmentStatusRecord")
}

// Represents the status history of an appointment
model AppointmentStatus {
  id            String       @id @default(uuid())
  appointmentId String       @unique
  appointment   Appointment  @relation("AppointmentStatusRecord", fields: [appointmentId], references: [id], onDelete: Cascade)
  status        AppointmentStatusEnum
  changedAt     DateTime
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

// Represents the type of visit for an appointment
model VisitType {
  id            String       @id @default(uuid())
  name          String       @unique
  description   String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  appointments  Appointment[] @relation("AppointmentVisitType")
}

// =========================================
// EMERGENCY
// =========================================

// emergency.prisma
// Represents an emergency case
model EmergencyCase {
  id            String      @id @default(uuid())
  patientId     String
  patient       Patient     @relation("PatientEmergencyCases", fields: [patientId], references: [id], onDelete: Cascade)
  triageId      String
  triage        Triage      @relation("EmergencyCaseTriage", fields: [triageId], references: [id], onDelete: Cascade)
  admissionId   String?
  admission     Admission?  @relation("EmergencyCaseAdmission", fields: [admissionId], references: [id], onDelete: SetNull)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  logs          EmergencyLog[] @relation("EmergencyCaseLogs")
}

// Represents a triage assessment for an emergency case
model Triage {
  id              String         @id @default(uuid())
  patientId       String
  patient         Patient        @relation("PatientTriage", fields: [patientId], references: [id], onDelete: Cascade)
  triageLevel     String
  symptoms        String
  assessedAt      DateTime
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  emergencyCases  EmergencyCase[] @relation("EmergencyCaseTriage")
}

// Represents an ambulance used in emergencies
model Ambulance {
  id            String     @id @default(uuid())
  vehicleNumber String     @unique
  status        String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// Tracks emergency-related activities
model EmergencyLog {
  id              String        @id @default(uuid())
  emergencyCaseId String
  emergencyCase   EmergencyCase @relation("EmergencyCaseLogs", fields: [emergencyCaseId], references: [id], onDelete: Cascade)
  description     String
  loggedAt        DateTime
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

// =========================================
// MATERNITY
// =========================================

// maternity.prisma
// Represents a maternity case
model MaternityCase {
  id            String      @id @default(uuid())
  patientId     String
  patient       Patient     @relation("PatientMaternityCases", fields: [patientId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deliveryRecords DeliveryRecord[] @relation("MaternityCaseDeliveries")
  ancVisits     ANCVisit[]  @relation("MaternityCaseANCVisits")
  pncVisits     PNCVisit[]  @relation("MaternityCasePNCVisits")
}

// Represents a delivery record for a maternity case
model DeliveryRecord {
  id              String        @id @default(uuid())
  maternityCaseId String
  maternityCase   MaternityCase @relation("MaternityCaseDeliveries", fields: [maternityCaseId], references: [id], onDelete: Cascade)
  deliveryDate    DateTime
  deliveryType    String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

// Represents an Antenatal Care (ANC) visit
model ANCVisit {
  id              String        @id @default(uuid())
  maternityCaseId String
  maternityCase   MaternityCase @relation("MaternityCaseANCVisits", fields: [maternityCaseId], references: [id], onDelete: Cascade)
  visitDate       DateTime
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

// Represents a Postnatal Care (PNC) visit
model PNCVisit {
  id              String        @id @default(uuid())
  maternityCaseId String
  maternityCase   MaternityCase @relation("MaternityCasePNCVisits", fields: [maternityCaseId], references: [id], onDelete: Cascade)
  visitDate       DateTime
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

// =========================================
// VACCINATION
// =========================================

// vaccination.prisma
// Represents a vaccination record for a patient
model VaccinationRecord {
  id                  String              @id @default(uuid())
  patientId           String
  patient             Patient             @relation("PatientVaccinationRecords", fields: [patientId], references: [id], onDelete: Cascade)
  vaccineId           String
  vaccine             Vaccine             @relation("VaccineRecords", fields: [vaccineId], references: [id], onDelete: Restrict)
  immunizationScheduleId String?
  immunizationSchedule ImmunizationSchedule? @relation("VaccinationSchedule", fields: [immunizationScheduleId], references: [id], onDelete: SetNull)
  administeredDate    DateTime
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
}

// Represents a vaccine in the hospital
model Vaccine {
  id                  String              @id @default(uuid())
  name                String              @unique
  description         String?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  vaccinationRecords  VaccinationRecord[] @relation("VaccineRecords")
}

// Represents an immunization schedule
model ImmunizationSchedule {
  id                  String              @id @default(uuid())
  name                String              @unique
  description         String?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  vaccinationRecords  VaccinationRecord[] @relation("VaccinationSchedule")
}

// =========================================
// OPERATION THEATRE
// =========================================

enum SurgeryStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum SurgicalRole {
  SURGEON
  ASSISTANT
  ANESTHESIOLOGIST
  SCRUB_NURSE
  CIRCULATING_NURSE
  TECHNICIAN
}

model Surgery {
  id String @id @default(uuid())
  patientId String
  patient Patient @relation("PatientSurgeries", fields: [patientId], references: [id], onDelete: Cascade)
  theatreId String
  theatre Theatre @relation("TheatreSurgeries", fields: [theatreId], references: [id], onDelete: Restrict)
  surgicalTeamId String
  surgicalTeam SurgicalTeam @relation("SurgeryTeam", fields: [surgicalTeamId], references: [id], onDelete: Restrict)
  preOpAssessmentId String?
  preOpAssessment PreOpAssessment? @relation("SurgeryPreOp", fields: [preOpAssessmentId], references: [id], onDelete: SetNull)
  anesthesiaRecord AnesthesiaRecord?
  postOpRecovery PostOpRecovery?
  auditLogs SurgeryAuditLog[]
  type String?
  estimatedDurationMinutes Int?
  actualDurationMinutes Int?
  status SurgeryStatus @default(PLANNED)
  notes String?
  complications String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Theatre {
  id String @id @default(uuid())
  name String @unique
  departmentId String
  department Department @relation("TheatreDepartment", fields: [departmentId], references: [id], onDelete: Restrict)
  surgeries Surgery[] @relation("TheatreSurgeries")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SurgicalTeam {
  id String @id @default(uuid())
  name String @unique
  members SurgicalTeamMember[]
  surgeries Surgery[] @relation("SurgeryTeam")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SurgicalTeamMember {
  id String @id @default(uuid())
  surgicalTeamId String
  userId String
  role SurgicalRole
  surgicalTeam SurgicalTeam @relation(fields: [surgicalTeamId], references: [id], onDelete: Cascade)
  user UserRegistration @relation(fields: [userId], references: [id], onDelete: Restrict)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PreOpAssessment {
  id String @id @default(uuid())
  patientId String
  patient Patient @relation("PatientPreOpAssessments", fields: [patientId], references: [id], onDelete: Cascade)
  assessment String
  assessedAt DateTime
  surgeries Surgery[] @relation("SurgeryPreOp")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AnesthesiaRecord {
  id String @id @default(uuid())
  surgeryId String @unique
  surgery Surgery @relation(fields: [surgeryId], references: [id], onDelete: Cascade)
  type String
  notes String?
  administeredAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PostOpRecovery {
  id String @id @default(uuid())
  surgeryId String @unique
  surgery Surgery @relation(fields: [surgeryId], references: [id], onDelete: Cascade)
  recoveryNotes String?
  dischargeDate DateTime?
  complications String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SurgeryAuditLog {
  id String @id @default(uuid())
  surgeryId String
  changedById String
  fieldChanged String
  oldValue String?
  newValue String?
  changedAt DateTime @default(now())
  surgery Surgery @relation(fields: [surgeryId], references: [id], onDelete: Cascade)
  changedBy UserRegistration @relation(fields: [changedById], references: [id])
}

// =========================================
// LABORATORY
// =========================================

// Represents a laboratory test
model LabTest {
  id            String       @id @default(uuid())
  name          String       @unique
  description   String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  labRequests   LabRequest[] @relation("LabTestRequests")
}

// Represents a laboratory test result
model LabResult {
  id            String     @id @default(uuid())
  labRequestId  String
  labRequest    LabRequest @relation("LabRequestResults", fields: [labRequestId], references: [id], onDelete: Cascade)
  result        String
  resultedAt    DateTime
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// Represents a request for a laboratory test
model LabRequest {
  id            String     @id @default(uuid())
  patientId     String
  patient       Patient    @relation("PatientLabRequests", fields: [patientId], references: [id], onDelete: Cascade)
  labTestId     String
  labTest       LabTest    @relation("LabTestRequests", fields: [labTestId], references: [id], onDelete: Restrict)
  sampleId      String?
  sample        Sample?    @relation("LabRequestSample", fields: [sampleId], references: [id], onDelete: SetNull)
  requestedAt   DateTime
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  labResults    LabResult[] @relation("LabRequestResults")
}

// Represents a sample collected for a lab test
model Sample {
  id            String       @id @default(uuid())
  patientId     String
  patient       Patient      @relation("PatientSamples", fields: [patientId], references: [id], onDelete: Cascade)
  sampleType    String
  collectedAt   DateTime
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  labRequests   LabRequest[] @relation("LabRequestSample")
}

// =========================================
// RADIOLOGY
// =========================================

// radiology.prisma
// Represents a radiology test
model RadiologyTest {
  id              String          @id @default(uuid())
  name            String          @unique
  description     String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  imagingOrders   ImagingOrder[]  @relation("RadiologyTestOrders")
}

// Represents a radiology test result
model RadiologyResult {
  id            String       @id @default(uuid())
  imagingOrderId String
  imagingOrder  ImagingOrder @relation("ImagingOrderResults", fields: [imagingOrderId], references: [id], onDelete: Cascade)
  result        String
  resultedAt    DateTime
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  scanImages    ScanImage[]  @relation("ResultScanImages")
}

// Represents an order for a radiology test
model ImagingOrder {
  id              String          @id @default(uuid())
  patientId       String
  patient         Patient         @relation("PatientImagingOrders", fields: [patientId], references: [id], onDelete: Cascade)
  radiologyTestId String
  radiologyTest   RadiologyTest   @relation("RadiologyTestOrders", fields: [radiologyTestId], references: [id], onDelete: Restrict)
  orderedAt       DateTime
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  radiologyResults RadiologyResult[] @relation("ImagingOrderResults")
}

// Represents a scan image from a radiology test
model ScanImage {
  id              String          @id @default(uuid())
  radiologyResultId String
  radiologyResult RadiologyResult @relation("ResultScanImages", fields: [radiologyResultId], references: [id], onDelete: Cascade)
  imageUrl        String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

// =========================================
// PHARMACY
// =========================================

// pharmacy.prisma
// Represents an item in the pharmacy inventory
model PharmacyItem {
  id              String          @id @default(uuid())
  drugId          String
  drug            Drug            @relation("PharmacyItemDrug", fields: [drugId], references: [id], onDelete: Restrict)
  batchNumber     String
  expiryDate      DateTime
  quantity        Int
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  dispenseRecords DispenseRecord[] @relation("PharmacyItemDispenses")
}

// Represents a prescription for a patient
model Prescription {
  id            String     @id @default(uuid())
  patientId     String
  patient       Patient    @relation("PatientPrescriptions", fields: [patientId], references: [id], onDelete: Cascade)
  doctorId      String
  doctor        Doctor     @relation("DoctorPrescriptions", fields: [doctorId], references: [id], onDelete: Restrict)
  drugId        String
  drug          Drug       @relation("PrescriptionDrug", fields: [drugId], references: [id], onDelete: Restrict)
  dosage        String
  prescribedAt  DateTime
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// Represents a drug in the pharmacy
model Drug {
  id              String          @id @default(uuid())
  name            String          @unique
  description     String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  pharmacyItems   PharmacyItem[]  @relation("PharmacyItemDrug")
  prescriptions   Prescription[]  @relation("PrescriptionDrug")
  dispensaryStocks DispensaryStock[] @relation("DispensaryStockDrug")
}

// Represents a record of dispensed medication
model DispenseRecord {
  id              String        @id @default(uuid())
  pharmacyItemId  String
  pharmacyItem    PharmacyItem  @relation("PharmacyItemDispenses", fields: [pharmacyItemId], references: [id], onDelete: Restrict)
  patientId       String
  patient         Patient       @relation("PatientDispenseRecords", fields: [patientId], references: [id], onDelete: Cascade)
  dispensedAt     DateTime
  quantity        Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

// =========================================
// DISPENSARY
// =========================================

// Represents a dispensary in the hospital
model Dispensary {
  id                String          @id @default(uuid())
  name              String          @unique
  location          String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  dispensaryStocks  DispensaryStock[] @relation("DispensaryStocks")
}

// Represents a pharmacist working in the dispensary
model Pharmacist {
  id            String     @id @default(uuid())
  firstName     String
  lastName      String
  email         String     @unique
  phone         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// Represents stock in the dispensary
model DispensaryStock {
  id            String     @id @default(uuid())
  dispensaryId  String
  dispensary    Dispensary @relation("DispensaryStocks", fields: [dispensaryId], references: [id], onDelete: Cascade)
  drugId        String
  drug          Drug       @relation("DispensaryStockDrug", fields: [drugId], references: [id], onDelete: Restrict)
  quantity      Int
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// =========================================
// CSSD
// =========================================

// Represents an item in the Central Sterile Services Department (CSSD)
model CSSDItem {
  id                  String              @id @default(uuid())
  name                String              @unique
  description         String?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  sterilizationCycles  SterilizationCycle[] @relation("CSSDItemCycles")
  instrumentRequests  InstrumentRequest[] @relation("CSSDItemRequests")
}

// Represents a sterilization cycle in the CSSD
model SterilizationCycle {
  id            String     @id @default(uuid())
  cssdItemId    String
  cssdItem      CSSDItem   @relation("CSSDItemCycles", fields: [cssdItemId], references: [id], onDelete: Restrict)
  cycleDate     DateTime
  status        String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// Represents a request for an instrument from the CSSD
model InstrumentRequest {
  id            String     @id @default(uuid())
  cssdItemId    String
  cssdItem      CSSDItem   @relation("CSSDItemRequests", fields: [cssdItemId], references: [id], onDelete: Restrict)
  departmentId  String
  department    Department @relation("InstrumentRequestDepartment", fields: [departmentId], references: [id], onDelete: Restrict)
  requestedAt   DateTime
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// =========================================
// HELPDESK
// =========================================

enum HelpCategoryEnum {
  TECHNICAL
  BILLING
  CLINICAL
  OTHER
}

// Represents a help desk ticket
model HelpTicket {
  id              String           @id @default(uuid())
  userId          String
  userType        String
  category        HelpCategoryEnum
  description     String
  status          String
  supportAgentId  String?
  supportAgent    SupportAgent?   @relation("TicketSupportAgent", fields: [supportAgentId], references: [id], onDelete: SetNull)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

// Represents a support agent for the help desk
model SupportAgent {
  id            String       @id @default(uuid())
  firstName     String
  lastName      String
  email         String       @unique
  phone         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  helpTickets   HelpTicket[] @relation("TicketSupportAgent")
}

// =========================================
// UTILITIES
// =========================================

// Tracks electricity usage logs
model ElectricityLog {
  id            String     @id @default(uuid())
  recordedAt    DateTime
  usageKwh      Float
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// Tracks water usage logs
model WaterLog {
  id            String     @id @default(uuid())
  recordedAt    DateTime
  usageLiters   Float
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// Tracks the status of backup generators
model BackupGeneratorStatus {
  id            String     @id @default(uuid())
  generatorId   String     @unique
  status        String
  lastCheckedAt DateTime
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// =========================================
// SETTINGS
// =========================================

// Represents system-wide settings
model SystemSetting {
  id            String     @id @default(uuid())
  key           String     @unique
  value         String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// Represents feature toggles for the system
model FeatureToggle {
  id            String     @id @default(uuid())
  name          String     @unique
  isEnabled     Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// Represents theme settings for the system
model ThemeSetting {
  id            String     @id @default(uuid())
  name          String     @unique
  primaryColor  String
  secondaryColor String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// =========================================
// VERIFICATION
// =========================================

// Represents verification tokens for users
model VerificationToken {
  id            String     @id @default(uuid())
  userId        String
  userType      String
  token         String     @unique
  expiresAt     DateTime
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  userVerificationStatus UserVerificationStatus? @relation("TokenUserVerification")
}

// Tracks audit logs for system actions
model AuditLog {
  id            String     @id @default(uuid())
  userId        String
  userType      String
  action        String
  details       String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// Represents the verification status of a user
model UserVerificationStatus {
  id                String            @id @default(uuid())
  verificationTokenId String           @unique
  verificationToken VerificationToken @relation("TokenUserVerification", fields: [verificationTokenId], references: [id], onDelete: Cascade)
  status            String
  verifiedAt        DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

// =========================================
// BILLING
// =========================================

// billing.prisma
enum BillingCategoryEnum {
  CONSULTATION
  PROCEDURE
  MEDICATION
  OTHER
}

// Represents an invoice for a patient
model Invoice {
  id              String            @id @default(uuid())
  patientId       String
  patient         Patient           @relation("PatientInvoices", fields: [patientId], references: [id], onDelete: Cascade)
  invoiceDate     DateTime
  totalAmount     Float
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  payments        Payment[]         @relation("InvoicePayments")
  billingItems    BillingItem[]     @relation("InvoiceBillingItems")
}

// Represents a payment for an invoice
model Payment {
  id            String     @id @default(uuid())
  invoiceId     String
  invoice       Invoice    @relation("InvoicePayments", fields: [invoiceId], references: [id], onDelete: Cascade)
  amount        Float
  paymentDate   DateTime
  method        String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// Represents an item on an invoice
model BillingItem {
  id              String            @id @default(uuid())
  invoiceId       String
  invoice         Invoice           @relation("InvoiceBillingItems", fields: [invoiceId], references: [id], onDelete: Cascade)
  billingCategory BillingCategoryEnum
  description     String
  amount          Float
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

// =========================================
// ACCOUNTING
// =========================================

// Represents a journal entry in the accounting system
model JournalEntry {
  id            String     @id @default(uuid())
  accountId     String
  account       Account    @relation("AccountJournalEntries", fields: [accountId], references: [id], onDelete: Restrict)
  amount        Float
  entryDate     DateTime
  description   String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  ledgerId      String
  ledger        Ledger     @relation("LedgerJournalEntries", fields: [ledgerId], references: [id], onDelete: Cascade)
}

// Represents a ledger for accounting
model Ledger {
  id              String         @id @default(uuid())
  name            String         @unique
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  journalEntries  JournalEntry[] @relation("LedgerJournalEntries")
  trialBalances   TrialBalance[] @relation("LedgerTrialBalances")
}

// Represents an account in the accounting system
model Account {
  id              String         @id @default(uuid())
  name            String         @unique
  accountType     String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  journalEntries  JournalEntry[] @relation("AccountJournalEntries")
}

// Represents a trial balance for accounting
model TrialBalance {
  id            String     @id @default(uuid())
  ledgerId      String
  ledger        Ledger     @relation("LedgerTrialBalances", fields: [ledgerId], references: [id], onDelete: Cascade)
  period        String
  balance       Float
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// =========================================
// CLAIM MGMT
// =========================================

// claim-mgmt.prisma
enum ClaimStatusEnum {
  PENDING
  APPROVED
  REJECTED
  SUBMITTED
}

// Represents an insurance claim
model Claim {
  id              String           @id @default(uuid())
  patientId       String
  patient         Patient          @relation("PatientClaims", fields: [patientId], references: [id], onDelete: Cascade)
  claimBatchId    String?
  claimBatch      ClaimBatch?      @relation("ClaimBatchClaims", fields: [claimBatchId], references: [id], onDelete: SetNull)
  claimStatusId   String           @unique
  claimStatus     ClaimStatus      @relation("ClaimStatusRecord", fields: [claimStatusId], references: [id], onDelete: Cascade)
  amount          Float
  submittedAt     DateTime
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  claimSubmissions ClaimSubmission[] @relation("ClaimSubmissions")
}

// Represents a batch of claims
model ClaimBatch {
  id            String     @id @default(uuid())
  batchNumber   String     @unique
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  claims        Claim[]    @relation("ClaimBatchClaims")
}

// Represents the status history of a claim
model ClaimStatus {
  id            String         @id @default(uuid())
  claimId       String         @unique
  claim         Claim?         @relation("ClaimStatusRecord")
  status        ClaimStatusEnum
  changedAt     DateTime
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

// Represents a submission of a claim
model ClaimSubmission {
  id            String     @id @default(uuid())
  claimId       String
  claim         Claim      @relation("ClaimSubmissions", fields: [claimId], references: [id], onDelete: Cascade)
  submittedAt   DateTime
  details       String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// =========================================
// NHIF
// =========================================

// nhif.prisma
// Represents an NHIF claim
model NHIFClaim {
  id            String       @id @default(uuid())
  patientId     String
  patient       Patient      @relation("PatientNHIFClaims", fields: [patientId], references: [id], onDelete: Cascade)
  nhifBenefitId String
  nhifBenefit   NHIFBenefit  @relation("NHIFClaimBenefit", fields: [nhifBenefitId], references: [id], onDelete: Restrict)
  amount        Float
  submittedAt   DateTime
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  nhifSubmissions NHIFSubmission[] @relation("NHIFClaimSubmissions")
}

// Represents an NHIF benefit
model NHIFBenefit {
  id            String       @id @default(uuid())
  name          String       @unique
  description   String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  nhifClaims    NHIFClaim[]  @relation("NHIFClaimBenefit")
}

// Represents an NHIF claim submission
model NHIFSubmission {
  id            String     @id @default(uuid())
  nhifClaimId   String
  nhifClaim     NHIFClaim  @relation("NHIFClaimSubmissions", fields: [nhifClaimId], references: [id], onDelete: Cascade)
  submittedAt   DateTime
  details       String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// =========================================
// INVENTORY
// =========================================

// inventory.prisma
// Represents an item in the inventory
model Item {
  id              String          @id @default(uuid())
  name            String          @unique
  description     String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  inventories     Inventory[]     @relation("ItemInventories")
  stockMovements  StockMovement[] @relation("ItemStockMovements")
  expiryAlerts    ExpiryAlert[]   @relation("ItemExpiryAlerts")
  substoreTransfers SubstoreTransfer[] @relation("SubstoreTransferItem")
  requisitions    Requisition[]   @relation("RequisitionItem")
}

// Represents the inventory stock for an item
model Inventory {
  id            String     @id @default(uuid())
  itemId        String
  item          Item       @relation("ItemInventories", fields: [itemId], references: [id], onDelete: Restrict)
  quantity      Int
  location      String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// Represents a stock movement for an item
model StockMovement {
  id            String     @id @default(uuid())
  itemId        String
  item          Item       @relation("ItemStockMovements", fields: [itemId], references: [id], onDelete: Restrict)
  quantity      Int
  movementType  String
  movedAt       DateTime
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// Represents an expiry alert for an item
model ExpiryAlert {
  id            String     @id @default(uuid())
  itemId        String
  item          Item       @relation("ItemExpiryAlerts", fields: [itemId], references: [id], onDelete: Restrict)
  expiryDate    DateTime
  alertedAt     DateTime
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// =========================================
// PROCUREMENT
// =========================================

// Represents a purchase order for procurement
model PurchaseOrder {
  id                String           @id @default(uuid())
  supplierId        String
  supplier          Supplier         @relation("SupplierPurchaseOrders", fields: [supplierId], references: [id], onDelete: Restrict)
  orderDate         DateTime
  totalAmount       Float
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  goodsReceivedNotes GoodsReceivedNote[] @relation("PurchaseOrderGRNs")
}

// Represents a supplier for procurement
model Supplier {
  id              String          @id @default(uuid())
  name            String          @unique
  contactInfo     String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  purchaseOrders  PurchaseOrder[] @relation("SupplierPurchaseOrders")
}

// Represents a goods received note
model GoodsReceivedNote {
  id              String        @id @default(uuid())
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation("PurchaseOrderGRNs", fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  receivedAt      DateTime
  details         String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

// =========================================
// SUBSTORE
// =========================================

// substore.prisma
// Represents a substore in the hospital
model Substore {
  id                String             @id @default(uuid())
  name              String             @unique
  location          String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  substoreTransfersFrom SubstoreTransfer[] @relation("SubstoreTransfersFrom")
  substoreTransfersTo   SubstoreTransfer[] @relation("SubstoreTransfersTo")
  requisitions      Requisition[]      @relation("SubstoreRequisitions")
}

// Represents a transfer between substores
model SubstoreTransfer {
  id              String     @id @default(uuid())
  fromSubstoreId  String
  fromSubstore    Substore   @relation("SubstoreTransfersFrom", fields: [fromSubstoreId], references: [id], onDelete: Restrict)
  toSubstoreId    String
  toSubstore      Substore   @relation("SubstoreTransfersTo", fields: [toSubstoreId], references: [id], onDelete: Restrict)
  itemId          String
  item            Item       @relation("SubstoreTransferItem", fields: [itemId], references: [id], onDelete: Restrict)
  quantity        Int
  transferredAt   DateTime
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

// Represents a requisition for items from a substore
model Requisition {
  id            String     @id @default(uuid())
  substoreId    String
  substore      Substore   @relation("SubstoreRequisitions", fields: [substoreId], references: [id], onDelete: Restrict)
  itemId        String
  item          Item       @relation("RequisitionItem", fields: [itemId], references: [id], onDelete: Restrict)
  quantity      Int
  requestedAt   DateTime
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// =========================================
// FIXED ASSETS
// =========================================

// Represents a fixed asset in the hospital
model FixedAsset {
  id                    String                 @id
  name                  String                 // Removed @unique constraint
  purchaseDate          DateTime
  cost                  Float
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  depreciationSchedules DepreciationSchedule[] @relation("AssetDepreciationSchedules")
  assetAudits           AssetAudit[]           @relation("AssetAudits")
}

// Represents a depreciation schedule for a fixed asset
model DepreciationSchedule {
  id               String     @id
  fixedAssetId     String
  fixedAsset       FixedAsset @relation("AssetDepreciationSchedules", fields: [fixedAssetId], references: [id], onDelete: Cascade)
  depreciationDate DateTime
  amount           Float
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

// Represents an audit of a fixed asset
model AssetAudit {
  id           String     @id
  fixedAssetId String
  fixedAsset   FixedAsset @relation("AssetAudits", fields: [fixedAssetId], references: [id], onDelete: Cascade)
  auditDate    DateTime
  findings     String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

// =========================================
// DEPARTMENTS
// =========================================

enum DepartmentTypeEnum {
  CLINICAL
  ADMINISTRATIVE
  SUPPORT
}

// Represents a department in the hospital
model Department {
  id                String            @id @default(uuid())
  name              String            @unique
  departmentType    DepartmentTypeEnum
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  units             Unit[]            @relation("DepartmentUnits")
  doctors           Doctor[]          @relation("DoctorDepartment")
  nurses            Nurse[]           @relation("NurseDepartment")
  wards             Ward[]            @relation("WardDepartment")
  serviceCounters   ServiceCounter[]  @relation("ServiceCounterDepartment")
  theatres          Theatre[]         @relation("TheatreDepartment")
  instrumentRequests InstrumentRequest[] @relation("InstrumentRequestDepartment")
}

// Represents a unit within a department
model Unit {
  id            String     @id @default(uuid())
  departmentId  String
  department    Department @relation("DepartmentUnits", fields: [departmentId], references: [id], onDelete: Cascade)
  name          String     @unique
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// =========================================
// REPORTS
// =========================================

// Represents a generated report
model Report {
  id              String          @id @default(uuid())
  reportTemplateId String
  reportTemplate  ReportTemplate  @relation("ReportTemplateReports", fields: [reportTemplateId], references: [id], onDelete: Restrict)
  generatedAt     DateTime
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

// Represents a template for generating reports
model ReportTemplate {
  id              String       @id @default(uuid())
  name            String       @unique
  description     String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  reports         Report[]     @relation("ReportTemplateReports")
  reportSchedules ReportSchedule[] @relation("TemplateReportSchedules")
}

// Represents a schedule for generating reports
model ReportSchedule {
  id              String         @id @default(uuid())
  reportTemplateId String
  reportTemplate  ReportTemplate @relation("TemplateReportSchedules", fields: [reportTemplateId], references: [id], onDelete: Cascade)
  scheduleDate    DateTime
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

// =========================================
// DYNAMIC REPORT
// =========================================

// Represents a custom report defined by users
model CustomReport {
  id            String        @id @default(uuid())
  name          String        @unique
  description   String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  reportFields  ReportField[] @relation("CustomReportFields")
  reportFilters ReportFilter[] @relation("CustomReportFilters")
}

// Represents a field in a custom report
model ReportField {
  id            String       @id @default(uuid())
  customReportId String
  customReport  CustomReport @relation("CustomReportFields", fields: [customReportId], references: [id], onDelete: Cascade)
  fieldName     String
  fieldType     String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

// Represents a filter for a custom report
model ReportFilter {
  id            String       @id @default(uuid())
  customReportId String
  customReport  CustomReport @relation("CustomReportFilters", fields: [customReportId], references: [id], onDelete: Cascade)
  filterName    String
  filterValue   String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

// =========================================
// MKT REFERRAL
// =========================================

// mkt-referral.prisma
// Represents a patient referral
model Referral {
  id                String          @id @default(uuid())
  patientId         String
  patient           Patient         @relation("PatientReferrals", fields: [patientId], references: [id], onDelete: Cascade)
  referringDoctorId String?
  referringDoctor   ReferringDoctor? @relation("ReferringDoctorReferrals", fields: [referringDoctorId], references: [id], onDelete: SetNull)
  referralSourceId  String
  referralSource    ReferralSource  @relation("ReferralSourceReferrals", fields: [referralSourceId], references: [id], onDelete: Restrict)
  referralDate      DateTime
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

// Represents a doctor who refers patients
model ReferringDoctor {
  id            String       @id @default(uuid())
  firstName     String
  lastName      String
  email         String?      @unique
  phone         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  referrals     Referral[]   @relation("ReferringDoctorReferrals")
}

// Represents a source of referrals
model ReferralSource {
  id            String       @id @default(uuid())
  name          String       @unique
  description   String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  referrals     Referral[]   @relation("ReferralSourceReferrals")
}
